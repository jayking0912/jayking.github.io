<!DOCTYPE html>
<!-- saved from url=(0021)http://guoyanjun.top/ -->
<html class=" global wide normal"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="minimal-ui,width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0"><style type="text/css">@-ms-viewport{width: device-width}</style><style type="text/css">html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}body{-webkit-text-size-adjust:none}</style><style type="text/css">*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}</style>
		<title>郭艳军的那些事儿</title>
		<link rel="shortcut icon" type="image/x-icon" href="http://guoyanjun.top/favicon.ico">
		
		<meta name="keywords" content="TinyJay, tinyjay, 郭艳军的那些事儿, 郭艳军的博客, 郭艳军, 一月筠, @一月筠">
		<meta name="description" content="๑۩ﺴ ﺴ۩๑ 透过指尖目视锦瑟流年，邂逅一场繁华的悸动...">
		<!--加载textillate文字特效库-->
		<link rel="stylesheet" href="./郭艳军的那些事儿_files/animate.css">
		<script src="./郭艳军的那些事儿_files/hm.js"></script><script src="./郭艳军的那些事儿_files/push.js"></script><script src="./郭艳军的那些事儿_files/jquery-1.9.1.min.js"></script><style type="text/css" abt="234"></style>
		<script src="./郭艳军的那些事儿_files/jquery.lettering.js"></script>
		<script src="./郭艳军的那些事儿_files/jquery.textillate.js"></script>
		<script type="text/javascript">
			$(function() {
				$('.text1').textillate({ in: { effect: 'flipInX' } });
				$('.text3').textillate({
					initialDelay: 9000,
					in: { effect: 'bounceInDown' }
				});
			})
		</script>
		<script>
			(function() {
				var bp = document.createElement('script');
				var curProtocol = window.location.protocol.split(':')[0];
				if(curProtocol === 'https') {
					bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
				} else {
					bp.src = 'http://push.zhanzhang.baidu.com/push.js';
				}
				var s = document.getElementsByTagName("script")[0];
				s.parentNode.insertBefore(bp, s);
			})();
		</script>
		<!--添加百度统计代码-->
		<script>
        var _hmt = _hmt || [];
        (function() {
            var hm = document.createElement("script");
            hm.src = "https://hm.baidu.com/hm.js?a0de0062ecc8e145d335478668581635";
            var s = document.getElementsByTagName("script")[0]; 
            s.parentNode.insertBefore(hm, s);
        })();
        </script>
		<!--[if lte IE 8]><script src="css/ie/html5shiv.js"></script><![endif]-->
		<style type="text/css">body{min-width:960px}.container{margin-left:auto;margin-right:auto;width:960px}.container.small{width:720px}.container.big{width:100%;max-width:1200px;min-width:960px}</style><style type="text/css">.\31 2u{width:100%}.\31 1u{width:91.6666666667%}.\31 0u{width:83.3333333333%}.\39 u{width:75%}.\38 u{width:66.6666666667%}.\37 u{width:58.3333333333%}.\36 u{width:50%}.\35 u{width:41.6666666667%}.\34 u{width:33.3333333333%}.\33 u{width:25%}.\32 u{width:16.6666666667%}.\31 u{width:8.3333333333%}.\-11u{margin-left:91.6666666667%}.\-10u{margin-left:83.3333333333%}.\-9u{margin-left:75%}.\-8u{margin-left:66.6666666667%}.\-7u{margin-left:58.3333333333%}.\-6u{margin-left:50%}.\-5u{margin-left:41.6666666667%}.\-4u{margin-left:33.3333333333%}.\-3u{margin-left:25%}.\-2u{margin-left:16.6666666667%}.\-1u{margin-left:8.3333333333%}</style><style type="text/css">.row>*{float:left}.row:after{content:'';display:block;clear:both;height:0}.row:first-child>*{padding-top:0!important}</style><style type="text/css">.row>*{padding-left:40px}.row+.row>*{padding:40px 0 0 40px}.row{margin-left:-40px}.row.flush>*{padding-left:0}.row+.row.flush>*{padding:0}.row.flush{margin-left:0}.row.half>*{padding-left:20px}.row+.row.half>*{padding:20px 0 0 20px}.row.half{margin-left:-20px}.row.quarter>*{padding-left:10px}.row+.row.quarter>*{padding:10px 0 0 10px}.row.quarter{margin-left:-10px}.row.oneandhalf>*{padding-left:60px}.row+.row.oneandhalf>*{padding:60px 0 0 60px}.row.oneandhalf{margin-left:-60px}.row.double>*{padding-left:80px}.row+.row.double>*{padding:80px 0 0 80px}.row.double{margin-left:-80px}</style><link rel="stylesheet" type="text/css" href="./郭艳军的那些事儿_files/style.css"><link rel="stylesheet" type="text/css" href="./郭艳军的那些事儿_files/style-wide.css"><style type="text/css">.not-global,.not-wide,.not-normal{display:none!important}.only-mobile,.only-mobilep{display:none!important}</style><link rel="stylesheet" type="text/css" href="./郭艳军的那些事儿_files/style-normal.css"><script src="./郭艳军的那些事儿_files/skel.min.js"></script>
		<script src="./郭艳军的那些事儿_files/init.js"></script>
		<noscript>
			&lt;link rel="stylesheet" href="css/skel.css" /&gt;
			&lt;link rel="stylesheet" href="css/style.css" /&gt;
			&lt;link rel="stylesheet" href="css/style-wide.css" /&gt;
			&lt;link rel="stylesheet" href="css/style-noscript.css" /&gt;
		</noscript>
		<!--[if lte IE 9]><link rel="stylesheet" href="css/ie/v9.css" /><![endif]-->
		<!--[if lte IE 8]><link rel="stylesheet" href="css/ie/v8.css" /><![endif]-->
	<script>//console.log('a')
</script><script>doAdblock();
function doAdblock(){
    (function() {
        function A() {}
        A.prototype = {
            rules: {
                'pps_pps': {
                    'find': /^http:\/\/www\.iqiyi\.com\/player\/cupid\/common\/pps_flvplay_s\.swf/,
                    'replace': 'http://swf.adtchrome.com/pps_20140420.swf'
                },
                '17173_in':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_in_20150522.swf"
                },
                '17173_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_out_20150522.swf"
                },
                '17173_live':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_stream_20150522.swf"
                },
                '17173_live_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                    'replace':"http://swf.adtchrome.com/17173.out.Live.swf"
                }
            },
            _done: null,
            get done() {
                if(!this._done) {
                    this._done = new Array();
                }
                return this._done;
            },
            addAnimations: function() {
                var style = document.createElement('style');
                style.type = 'text/css';
                style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                document.getElementsByTagName('head')[0].appendChild(style);
            },
            animationsHandler: function(e) {
                if(e.animationName === 'playerInserted') {
                    this.replace(e.target);
                }
            },
            replace: function(elem) {
                if (/http:\/\/v.youku.com\/v_show\/.*/.test(window.location.href)){
                    var tag = document.getElementById("playerBox").getAttribute("player")
                    if (tag == "adt"){
                        console.log("adt adv")
                        return;
                    }
                }
                if(this.done.indexOf(elem) != -1) return;
                this.done.push(elem);
                var player = elem.data || elem.src;
                if(!player) return;
                var i, find, replace = false;
                for(i in this.rules) {
                    find = this.rules[i]['find'];
                    if(find.test(player)) {
                        replace = this.rules[i]['replace'];
                        if('function' === typeof this.rules[i]['preHandle']) {
                            this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                        }else{
                            this.reallyReplace.bind(this, elem, find, replace)();
                        }
                        break;
                    }
                }
            },
            reallyReplace: function(elem, find, replace) {
                elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem.src = elem.src.replace(find, replace)) && (elem.style.display = 'block'));
                var b = elem.querySelector("param[name='movie']");
                this.reloadPlugin(elem);
            },
            reloadPlugin: function(elem) {
                var nextSibling = elem.nextSibling;
                var parentNode = elem.parentNode;
                parentNode.removeChild(elem);
                var newElem = elem.cloneNode(true);
                this.done.push(newElem);
                if(nextSibling) {
                    parentNode.insertBefore(newElem, nextSibling);
                } else {
                    parentNode.appendChild(newElem);
                }
            },
            init: function() {
                var handler = this.animationsHandler.bind(this);
                document.body.addEventListener('webkitAnimationStart', handler, false);
                document.body.addEventListener('msAnimationStart', handler, false);
                document.body.addEventListener('oAnimationStart', handler, false);
                document.body.addEventListener('animationstart', handler, false);
                this.addAnimations();
            }
        };
        new A().init();
    })();
}
// 20140730
(function cnbeta() {
    if (document.URL.indexOf('cnbeta.com') >= 0) {
        var elms = document.body.querySelectorAll("p>embed");
        Array.prototype.forEach.call(elms, function(elm) {
            elm.style.marginLeft = "0px";
        });
    }
})();
//baidu
if(document.URL.indexOf('www.baidu.com') >= 0){
    if(document && document.getElementsByTagName && document.getElementById && document.body){
        var aa = function(){
            var all = document.body.querySelectorAll("#content_left div,#content_left table");
            for(var i = 0; i < all.length; i++){
                if(/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))){all[i].style.display= "none";all[i].style.visibility='hidden';}
            }
            all = document.body.querySelectorAll('.result.c-container[id="1"]');
            //if(all.length == 1) return;
            for(var i = 0; i < all.length; i++){
                if(all[i].innerHTML && all[i].innerHTML.indexOf('广告')>-1){
                    all[i].style.display= "none";all[i].style.visibility='hidden';
                }
            }
        }
        aa();
        document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified',aa)
    };
}
// 20140922
(function kill_360() {
    if (document.URL.indexOf('so.com') >= 0) {
        document.getElementById("e_idea_pp").style.display = none;
    }
})();
if (document.URL.indexOf("tv.sohu.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
if (document.URL.indexOf("56.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
if (document.URL.indexOf("iqiyi.com") >= 0){
    if (document.cookie.indexOf("player_forcedType=h5_VOD")==-1){
        document.cookie='player_forcedType=h5_VOD'
        if(localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime)<60000){
            console.log('no reload')
        }else{
            location.reload()
            localStorage.reloadTime = Date.now();
        }
    }
}
</script><style type="text/css">object,embed{                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;                -o-animation-duration:.001s;-o-animation-name:playerInserted;                animation-duration:.001s;animation-name:playerInserted;}                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}</style></head>

<style>

    body {
    
        padding:0;
    
        margin:0;
    
        overflow:hidden;
    
        height: 600px;
    
    }
    
    canvas {
    
        padding:0;
    
        margin:0;
    
    }
    
    div.btnbg {
    
        position:fixed;
    
        left:0;
    
        top:0;
    
    }
    
    </style>

	<body class="">
		<div id="wrapper">
			<canvas id="sakura" width="1761" height="1202"></canvas>

			<div id="main">
				<!-- Header -->
				<header id="header">
					<div align="center">
						<img src="./郭艳军的那些事儿_files/portrait.jpg" style="width:100px; height:100px; border-radius:50%; overflow:hidden;">
					</div>
					<!--<h2>一月筠</h2>-->
					<nav>
						<ul>
							<li>
								<a href="http://guoyanjun.top/blog/" class="fa  fa-pencil-square-o" style="color:mediumspringgreen"><span>Blog</span></a>
							</li>
							<li>
								<a href="https://github.com/tinyjay" class="fa fa-github"><span>Github</span></a>
							</li>
							<li>
								<a href="http://www.jianshu.com/u/b13ee6afc1e0" class="fa fa-book"><span>JianShu</span></a>
							</li>
							<li>
								<a href="http://weibo.com/1778140743" class="fa fa-weibo"><span>Weibo</span></a>
							</li>
						</ul>
					</nav>
				</header>
				<footer id="footer">
					<div style="text-align:center;">
						Powered by GuoYanjun
						<span style="float:center; margin-left: 5px;">
							<script type="text/javascript">
							var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");
							document.write(unescape("%3Cspan id='cnzz_stat_icon_1261663353'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s4.cnzz.com/z_stat.php%3Fid%3D1261663353%26show%3Dpic' type='text/javascript'%3E%3C/script%3E"));
						   </script><span id="cnzz_stat_icon_1261663353"><a href="http://www.cnzz.com/stat/website.php?web_id=1261663353" target="_blank" title="站长统计"><img border="0" hspace="0" vspace="0" src="./郭艳军的那些事儿_files/pic.gif"></a></span><script src="./郭艳军的那些事儿_files/z_stat.php" type="text/javascript"></script><script src="./郭艳军的那些事儿_files/core.php" charset="utf-8" type="text/javascript"></script>
						</span>
					</div>
				</footer>
			</div>
		</div>
	

        <script id="sakura_point_vsh" type="x-shader/x_vertex">

            uniform mat4 uProjection;
            
            uniform mat4 uModelview;
            
            uniform vec3 uResolution;
            
            uniform vec3 uOffset;
            
            uniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius
            
            uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start
            
            
            
            attribute vec3 aPosition;
            
            attribute vec3 aEuler;
            
            attribute vec2 aMisc; //x:size, y:fade
            
            
            
            varying vec3 pposition;
            
            varying float psize;
            
            varying float palpha;
            
            varying float pdist;
            
            
            
            //varying mat3 rotMat;
            
            varying vec3 normX;
            
            varying vec3 normY;
            
            varying vec3 normZ;
            
            varying vec3 normal;
            
            
            
            varying float diffuse;
            
            varying float specular;
            
            varying float rstop;
            
            varying float distancefade;
            
            
            
            void main(void) {
            
                // Projection is based on vertical angle
            
                vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);
            
                gl_Position = uProjection * pos;
            
                gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;
            
                
            
                pposition = pos.xyz;
            
                psize = aMisc.x;
            
                pdist = length(pos.xyz);
            
                palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);
            
                
            
                vec3 elrsn = sin(aEuler);
            
                vec3 elrcs = cos(aEuler);
            
                mat3 rotx = mat3(
            
                    1.0, 0.0, 0.0,
            
                    0.0, elrcs.x, elrsn.x,
            
                    0.0, -elrsn.x, elrcs.x
            
                );
            
                mat3 roty = mat3(
            
                    elrcs.y, 0.0, -elrsn.y,
            
                    0.0, 1.0, 0.0,
            
                    elrsn.y, 0.0, elrcs.y
            
                );
            
                mat3 rotz = mat3(
            
                    elrcs.z, elrsn.z, 0.0, 
            
                    -elrsn.z, elrcs.z, 0.0,
            
                    0.0, 0.0, 1.0
            
                );
            
                mat3 rotmat = rotx * roty * rotz;
            
                normal = rotmat[2];
            
                
            
                mat3 trrotm = mat3(
            
                    rotmat[0][0], rotmat[1][0], rotmat[2][0],
            
                    rotmat[0][1], rotmat[1][1], rotmat[2][1],
            
                    rotmat[0][2], rotmat[1][2], rotmat[2][2]
            
                );
            
                normX = trrotm[0];
            
                normY = trrotm[1];
            
                normZ = trrotm[2];
            
                
            
                const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);
            
                
            
                float tmpdfs = dot(lit, normal);
            
                if(tmpdfs < 0.0) {
            
                    normal = -normal;
            
                    tmpdfs = dot(lit, normal);
            
                }
            
                diffuse = 0.4 + tmpdfs;
            
                
            
                vec3 eyev = normalize(-pos.xyz);
            
                if(dot(eyev, normal) > 0.0) {
            
                    vec3 hv = normalize(eyev + lit);
            
                    specular = pow(max(dot(hv, normal), 0.0), 20.0);
            
                }
            
                else {
            
                    specular = 0.0;
            
                }
            
                
            
                rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);
            
                rstop = pow(rstop, 0.5);
            
                //-0.69315 = ln(0.5)
            
                distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));
            
            }
            
            </script>
            
            <script id="sakura_point_fsh" type="x-shader/x_fragment">
            
            #ifdef GL_ES
            
            //precision mediump float;
            
            precision highp float;
            
            #endif
            
            
            
            uniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius
            
            uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start
            
            
            
            const vec3 fadeCol = vec3(0.08, 0.03, 0.06);
            
            
            
            varying vec3 pposition;
            
            varying float psize;
            
            varying float palpha;
            
            varying float pdist;
            
            
            
            //varying mat3 rotMat;
            
            varying vec3 normX;
            
            varying vec3 normY;
            
            varying vec3 normZ;
            
            varying vec3 normal;
            
            
            
            varying float diffuse;
            
            varying float specular;
            
            varying float rstop;
            
            varying float distancefade;
            
            
            
            float ellipse(vec2 p, vec2 o, vec2 r) {
            
                vec2 lp = (p - o) / r;
            
                return length(lp) - 1.0;
            
            }
            
            
            
            void main(void) {
            
                vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;
            
                vec3 d = vec3(0.0, 0.0, -1.0);
            
                float nd = normZ.z; //dot(-normZ, d);
            
                if(abs(nd) < 0.0001) discard;
            
                
            
                float np = dot(normZ, p);
            
                vec3 tp = p + d * np / nd;
            
                vec2 coord = vec2(dot(normX, tp), dot(normY, tp));
            
                
            
                //angle = 15 degree
            
                const float flwrsn = 0.258819045102521;
            
                const float flwrcs = 0.965925826289068;
            
                mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);
            
                vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;
            
                
            
                float r;
            
                if(flwrp.x < 0.0) {
            
                    r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);
            
                }
            
                else {
            
                    r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);
            
                }
            
                
            
                if(r > rstop) discard;
            
                
            
                vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);
            
                float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));
            
                col *= vec3(1.0, grady, grady);
            
                col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));
            
                col = col * diffuse + specular;
            
                
            
                col = mix(fadeCol, col, distancefade);
            
                
            
                float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;
            
                alpha = smoothstep(0.0, 1.0, alpha) * palpha;
            
                
            
                gl_FragColor = vec4(col * 0.5, alpha);
            
            }
            
            </script>
            
            <!-- effects -->
            
            <script id="fx_common_vsh" type="x-shader/x_vertex">
            
            uniform vec3 uResolution;
            
            attribute vec2 aPosition;
            
            
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            
            
            void main(void) {
            
                gl_Position = vec4(aPosition, 0.0, 1.0);
            
                texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);
            
                screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);
            
            }
            
            </script>
            
            <script id="bg_fsh" type="x-shader/x_fragment">
            
            #ifdef GL_ES
            
            //precision mediump float;
            
            precision highp float;
            
            #endif
            
            
            
            uniform vec2 uTimes;
            
            
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            
            
            void main(void) {
            
                vec3 col;
            
                float c;
            
                vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);
            
                c = exp(-pow(length(tmpv) * 1.8, 2.0));
            
                col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);
            
                gl_FragColor = vec4(col * 0.5, 1.0);
            
            }
            
            </script>
            
            <script id="fx_brightbuf_fsh" type="x-shader/x_fragment">
            
            #ifdef GL_ES
            
            //precision mediump float;
            
            precision highp float;
            
            #endif
            
            uniform sampler2D uSrc;
            
            uniform vec2 uDelta;
            
            
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            
            
            void main(void) {
            
                vec4 col = texture2D(uSrc, texCoord);
            
                gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);
            
            }
            
            </script>
            
            <script id="fx_dirblur_r4_fsh" type="x-shader/x_fragment">
            
            #ifdef GL_ES
            
            //precision mediump float;
            
            precision highp float;
            
            #endif
            
            uniform sampler2D uSrc;
            
            uniform vec2 uDelta;
            
            uniform vec4 uBlurDir; //dir(x, y), stride(z, w)
            
            
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            
            
            void main(void) {
            
                vec4 col = texture2D(uSrc, texCoord);
            
                col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);
            
                col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);
            
                col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);
            
                col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);
            
                gl_FragColor = col / 5.0;
            
            }
            
            </script>
            
            <!-- effect fragment shader template -->
            
            <script id="fx_common_fsh" type="x-shader/x_fragment">
            
            #ifdef GL_ES
            
            //precision mediump float;
            
            precision highp float;
            
            #endif
            
            uniform sampler2D uSrc;
            
            uniform vec2 uDelta;
            
            
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            
            
            void main(void) {
            
                gl_FragColor = texture2D(uSrc, texCoord);
            
            }
            
            </script>
            
            <!-- post processing -->
            
            <script id="pp_final_vsh" type="x-shader/x_vertex">
            
            uniform vec3 uResolution;
            
            attribute vec2 aPosition;
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            void main(void) {
            
                gl_Position = vec4(aPosition, 0.0, 1.0);
            
                texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);
            
                screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);
            
            }
            
            </script>
            
            <script id="pp_final_fsh" type="x-shader/x_fragment">
            
            #ifdef GL_ES
            
            //precision mediump float;
            
            precision highp float;
            
            #endif
            
            uniform sampler2D uSrc;
            
            uniform sampler2D uBloom;
            
            uniform vec2 uDelta;
            
            varying vec2 texCoord;
            
            varying vec2 screenCoord;
            
            void main(void) {
            
                vec4 srccol = texture2D(uSrc, texCoord) * 2.0;
            
                vec4 bloomcol = texture2D(uBloom, texCoord);
            
                vec4 col;
            
                col = srccol + bloomcol * (vec4(1.0) + srccol);
            
                col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);
            
                col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)
            
                
            
                gl_FragColor = vec4(col.rgb, 1.0);
            
                gl_FragColor.a = 1.0;
            
            }
            
            </script>
            
            
            
            <script>
            
            // Utilities
            
            var Vector3 = {};
            
            var Matrix44 = {};
            
            Vector3.create = function(x, y, z) {
            
                return {'x':x, 'y':y, 'z':z};
            
            };
            
            Vector3.dot = function (v0, v1) {
            
                return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;
            
            };
            
            Vector3.cross = function (v, v0, v1) {
            
                v.x = v0.y * v1.z - v0.z * v1.y;
            
                v.y = v0.z * v1.x - v0.x * v1.z;
            
                v.z = v0.x * v1.y - v0.y * v1.x;
            
            };
            
            Vector3.normalize = function (v) {
            
                var l = v.x * v.x + v.y * v.y + v.z * v.z;
            
                if(l > 0.00001) {
            
                    l = 1.0 / Math.sqrt(l);
            
                    v.x *= l;
            
                    v.y *= l;
            
                    v.z *= l;
            
                }
            
            };
            
            Vector3.arrayForm = function(v) {
            
                if(v.array) {
            
                    v.array[0] = v.x;
            
                    v.array[1] = v.y;
            
                    v.array[2] = v.z;
            
                }
            
                else {
            
                    v.array = new Float32Array([v.x, v.y, v.z]);
            
                }
            
                return v.array;
            
            };
            
            Matrix44.createIdentity = function () {
            
                return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);
            
            };
            
            Matrix44.loadProjection = function (m, aspect, vdeg, near, far) {
            
                var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;
            
                var w = h * aspect;
            
                
            
                m[0] = 2.0 * near / w;
            
                m[1] = 0.0;
            
                m[2] = 0.0;
            
                m[3] = 0.0;
            
                
            
                m[4] = 0.0;
            
                m[5] = 2.0 * near / h;
            
                m[6] = 0.0;
            
                m[7] = 0.0;
            
                
            
                m[8] = 0.0;
            
                m[9] = 0.0;
            
                m[10] = -(far + near) / (far - near);
            
                m[11] = -1.0;
            
                
            
                m[12] = 0.0;
            
                m[13] = 0.0;
            
                m[14] = -2.0 * far * near / (far - near);
            
                m[15] = 0.0;
            
            };
            
            Matrix44.loadLookAt = function (m, vpos, vlook, vup) {
            
                var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);
            
                Vector3.normalize(frontv);
            
                var sidev = Vector3.create(1.0, 0.0, 0.0);
            
                Vector3.cross(sidev, vup, frontv);
            
                Vector3.normalize(sidev);
            
                var topv = Vector3.create(1.0, 0.0, 0.0);
            
                Vector3.cross(topv, frontv, sidev);
            
                Vector3.normalize(topv);
            
                
            
                m[0] = sidev.x;
            
                m[1] = topv.x;
            
                m[2] = frontv.x;
            
                m[3] = 0.0;
            
                
            
                m[4] = sidev.y;
            
                m[5] = topv.y;
            
                m[6] = frontv.y;
            
                m[7] = 0.0;
            
                
            
                m[8] = sidev.z;
            
                m[9] = topv.z;
            
                m[10] = frontv.z;
            
                m[11] = 0.0;
            
                
            
                m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);
            
                m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);
            
                m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);
            
                m[15] = 1.0;
            
            };
            
            
            
            //
            
            var timeInfo = {
            
                'start':0, 'prev':0, // Date
            
                'delta':0, 'elapsed':0 // Number(sec)
            
            };
            
            
            
            //
            
            var gl;
            
            var renderSpec = {
            
                'width':0,
            
                'height':0,
            
                'aspect':1,
            
                'array':new Float32Array(3),
            
                'halfWidth':0,
            
                'halfHeight':0,
            
                'halfArray':new Float32Array(3)
            
                // and some render targets. see setViewport()
            
            };
            
            renderSpec.setSize = function(w, h) {
            
                renderSpec.width = w;
            
                renderSpec.height = h;
            
                renderSpec.aspect = renderSpec.width / renderSpec.height;
            
                renderSpec.array[0] = renderSpec.width;
            
                renderSpec.array[1] = renderSpec.height;
            
                renderSpec.array[2] = renderSpec.aspect;
            
                
            
                renderSpec.halfWidth = Math.floor(w / 2);
            
                renderSpec.halfHeight = Math.floor(h / 2);
            
                renderSpec.halfArray[0] = renderSpec.halfWidth;
            
                renderSpec.halfArray[1] = renderSpec.halfHeight;
            
                renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;
            
            };
            
            
            
            function deleteRenderTarget(rt) {
            
                gl.deleteFramebuffer(rt.frameBuffer);
            
                gl.deleteRenderbuffer(rt.renderBuffer);
            
                gl.deleteTexture(rt.texture);
            
            }
            
            
            
            function createRenderTarget(w, h) {
            
                var ret = {
            
                    'width':w,
            
                    'height':h,
            
                    'sizeArray':new Float32Array([w, h, w / h]),
            
                    'dtxArray':new Float32Array([1.0 / w, 1.0 / h])
            
                };
            
                ret.frameBuffer = gl.createFramebuffer();
            
                ret.renderBuffer = gl.createRenderbuffer();
            
                ret.texture = gl.createTexture();
            
                
            
                gl.bindTexture(gl.TEXTURE_2D, ret.texture);
            
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            
                
            
                gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);
            
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);
            
                
            
                gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);
            
                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);
            
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);
            
                
            
                gl.bindTexture(gl.TEXTURE_2D, null);
            
                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            
                
            
                return ret;
            
            }
            
            
            
            function compileShader(shtype, shsrc) {
            
                var retsh = gl.createShader(shtype);
            
                
            
                gl.shaderSource(retsh, shsrc);
            
                gl.compileShader(retsh);
            
                
            
                if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {
            
                    var errlog = gl.getShaderInfoLog(retsh);
            
                    gl.deleteShader(retsh);
            
                    console.error(errlog);
            
                    return null;
            
                }
            
                return retsh;
            
            }
            
            
            
            function createShader(vtxsrc, frgsrc, uniformlist, attrlist) {
            
                var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);
            
                var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);
            
                
            
                if(vsh == null || fsh == null) {
            
                    return null;
            
                }
            
                
            
                var prog = gl.createProgram();
            
                gl.attachShader(prog, vsh);
            
                gl.attachShader(prog, fsh);
            
                
            
                gl.deleteShader(vsh);
            
                gl.deleteShader(fsh);
            
                
            
                gl.linkProgram(prog);
            
                if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {
            
                    var errlog = gl.getProgramInfoLog(prog);
            
                    console.error(errlog);
            
                    return null;
            
                }
            
                
            
                if(uniformlist) {
            
                    prog.uniforms = {};
            
                    for(var i = 0; i < uniformlist.length; i++) {
            
                        prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);
            
                    }
            
                }
            
                
            
                if(attrlist) {
            
                    prog.attributes = {};
            
                    for(var i = 0; i < attrlist.length; i++) {
            
                        var attr = attrlist[i];
            
                        prog.attributes[attr] = gl.getAttribLocation(prog, attr);
            
                    }
            
                }
            
                
            
                return prog;
            
            }
            
            
            
            function useShader(prog) {
            
                gl.useProgram(prog);
            
                for(var attr in prog.attributes) {
            
                    gl.enableVertexAttribArray(prog.attributes[attr]);;
            
                }
            
            }
            
            
            
            function unuseShader(prog) {
            
                for(var attr in prog.attributes) {
            
                    gl.disableVertexAttribArray(prog.attributes[attr]);;
            
                }
            
                gl.useProgram(null);
            
            }
            
            
            
            /////
            
            var projection = {
            
                'angle':60,
            
                'nearfar':new Float32Array([0.1, 100.0]),
            
                'matrix':Matrix44.createIdentity()
            
            };
            
            var camera = {
            
                'position':Vector3.create(0, 0, 100),
            
                'lookat':Vector3.create(0, 0, 0),
            
                'up':Vector3.create(0, 1, 0),
            
                'dof':Vector3.create(10.0, 4.0, 8.0),
            
                'matrix':Matrix44.createIdentity()
            
            };
            
            
            
            var pointFlower = {};
            
            var meshFlower = {};
            
            var sceneStandBy = false;
            
            
            
            var BlossomParticle = function () {
            
                this.velocity = new Array(3);
            
                this.rotation = new Array(3);
            
                this.position = new Array(3);
            
                this.euler = new Array(3);
            
                this.size = 1.0;
            
                this.alpha = 1.0;
            
                this.zkey = 0.0;
            
            };
            
            
            
            BlossomParticle.prototype.setVelocity = function (vx, vy, vz) {
            
                this.velocity[0] = vx;
            
                this.velocity[1] = vy;
            
                this.velocity[2] = vz;
            
            };
            
            
            
            BlossomParticle.prototype.setRotation = function (rx, ry, rz) {
            
                this.rotation[0] = rx;
            
                this.rotation[1] = ry;
            
                this.rotation[2] = rz;
            
            };
            
            
            
            BlossomParticle.prototype.setPosition = function (nx, ny, nz) {
            
                this.position[0] = nx;
            
                this.position[1] = ny;
            
                this.position[2] = nz;
            
            };
            
            
            
            BlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {
            
                this.euler[0] = rx;
            
                this.euler[1] = ry;
            
                this.euler[2] = rz;
            
            };
            
            
            
            BlossomParticle.prototype.setSize = function (s) {
            
                this.size = s;
            
            };
            
            
            
            BlossomParticle.prototype.update = function (dt, et) {
            
                this.position[0] += this.velocity[0] * dt;
            
                this.position[1] += this.velocity[1] * dt;
            
                this.position[2] += this.velocity[2] * dt;
            
                
            
                this.euler[0] += this.rotation[0] * dt;
            
                this.euler[1] += this.rotation[1] * dt;
            
                this.euler[2] += this.rotation[2] * dt;
            
            };
            
            
            
            function createPointFlowers() {
            
                // get point sizes
            
                var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
            
                renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};
            
                
            
                var vtxsrc = document.getElementById("sakura_point_vsh").textContent;
            
                var frgsrc = document.getElementById("sakura_point_fsh").textContent;
            
                
            
                pointFlower.program = createShader(
            
                    vtxsrc, frgsrc,
            
                    ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],
            
                    ['aPosition', 'aEuler', 'aMisc']
            
                );
            
                
            
                useShader(pointFlower.program);
            
                pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);
            
                pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);
            
                
            
                // paramerters: velocity[3], rotate[3]
            
                pointFlower.numFlowers = 300;
            
                pointFlower.particles = new Array(pointFlower.numFlowers);
            
                // vertex attributes {position[3], euler_xyz[3], size[1]}
            
                pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));
            
                pointFlower.positionArrayOffset = 0;
            
                pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;
            
                pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;
            
                
            
                pointFlower.buffer = gl.createBuffer();
            
                gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);
            
                gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);
            
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
            
                
            
                unuseShader(pointFlower.program);
            
                
            
                for(var i = 0; i < pointFlower.numFlowers; i++) {
            
                    pointFlower.particles[i] = new BlossomParticle();
            
                }
            
            }
            
            
            
            function initPointFlowers() {
            
                //area
            
                pointFlower.area = Vector3.create(20.0, 20.0, 20.0);
            
                pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;
            
                
            
                pointFlower.fader.x = 10.0; //env fade start
            
                pointFlower.fader.y = pointFlower.area.z; //env fade half
            
                pointFlower.fader.z = 0.1;  //near fade start
            
                
            
                //particles
            
                var PI2 = Math.PI * 2.0;
            
                var tmpv3 = Vector3.create(0, 0, 0);
            
                var tmpv = 0;
            
                var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};
            
                for(var i = 0; i < pointFlower.numFlowers; i++) {
            
                    var tmpprtcl = pointFlower.particles[i];
            
                    
            
                    //velocity
            
                    tmpv3.x = symmetryrand() * 0.3 + 0.8;
            
                    tmpv3.y = symmetryrand() * 0.2 - 1.0;
            
                    tmpv3.z = symmetryrand() * 0.3 + 0.5;
            
                    Vector3.normalize(tmpv3);
            
                    tmpv = 2.0 + Math.random() * 1.0;
            
                    tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);
            
                    
            
                    //rotation
            
                    tmpprtcl.setRotation(
            
                        symmetryrand() * PI2 * 0.5,
            
                        symmetryrand() * PI2 * 0.5,
            
                        symmetryrand() * PI2 * 0.5
            
                    );
            
                    
            
                    //position
            
                    tmpprtcl.setPosition(
            
                        symmetryrand() * pointFlower.area.x,
            
                        symmetryrand() * pointFlower.area.y,
            
                        symmetryrand() * pointFlower.area.z
            
                    );
            
                    
            
                    //euler
            
                    tmpprtcl.setEulerAngles(
            
                        Math.random() * Math.PI * 2.0,
            
                        Math.random() * Math.PI * 2.0,
            
                        Math.random() * Math.PI * 2.0
            
                    );
            
                    
            
                    //size
            
                    tmpprtcl.setSize(0.9 + Math.random() * 0.1);
            
                }
            
            }
            
            
            
            function renderPointFlowers() {
            
                //update
            
                var PI2 = Math.PI * 2.0;
            
                var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];
            
                var repeatPos = function (prt, cmp, limit) {
            
                    if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {
            
                        //out of area
            
                        if(prt.position[cmp] > 0) {
            
                            prt.position[cmp] -= limit * 2.0;
            
                        }
            
                        else {
            
                            prt.position[cmp] += limit * 2.0;
            
                        }
            
                    }
            
                };
            
                var repeatEuler = function (prt, cmp) {
            
                    prt.euler[cmp] = prt.euler[cmp] % PI2;
            
                    if(prt.euler[cmp] < 0.0) {
            
                        prt.euler[cmp] += PI2;
            
                    }
            
                };
            
                
            
                for(var i = 0; i < pointFlower.numFlowers; i++) {
            
                    var prtcl = pointFlower.particles[i];
            
                    prtcl.update(timeInfo.delta, timeInfo.elapsed);
            
                    repeatPos(prtcl, 0, pointFlower.area.x);
            
                    repeatPos(prtcl, 1, pointFlower.area.y);
            
                    repeatPos(prtcl, 2, pointFlower.area.z);
            
                    repeatEuler(prtcl, 0);
            
                    repeatEuler(prtcl, 1);
            
                    repeatEuler(prtcl, 2);
            
                    
            
                    prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;
            
                    
            
                    prtcl.zkey = (camera.matrix[2] * prtcl.position[0]
            
                                + camera.matrix[6] * prtcl.position[1]
            
                                + camera.matrix[10] * prtcl.position[2]
            
                                + camera.matrix[14]);
            
                }
            
                
            
                // sort
            
                pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});
            
                
            
                // update data
            
                var ipos = pointFlower.positionArrayOffset;
            
                var ieuler = pointFlower.eulerArrayOffset;
            
                var imisc = pointFlower.miscArrayOffset;
            
                for(var i = 0; i < pointFlower.numFlowers; i++) {
            
                    var prtcl = pointFlower.particles[i];
            
                    pointFlower.dataArray[ipos] = prtcl.position[0];
            
                    pointFlower.dataArray[ipos + 1] = prtcl.position[1];
            
                    pointFlower.dataArray[ipos + 2] = prtcl.position[2];
            
                    ipos += 3;
            
                    pointFlower.dataArray[ieuler] = prtcl.euler[0];
            
                    pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];
            
                    pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];
            
                    ieuler += 3;
            
                    pointFlower.dataArray[imisc] = prtcl.size;
            
                    pointFlower.dataArray[imisc + 1] = prtcl.alpha;
            
                    imisc += 2;
            
                }
            
                
            
                //draw
            
                gl.enable(gl.BLEND);
            
                //gl.disable(gl.DEPTH_TEST);
            
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
            
                
            
                var prog = pointFlower.program;
            
                useShader(prog);
            
                
            
                gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);
            
                gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);
            
                gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);
            
                gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));
            
                gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));
            
                
            
                gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);
            
                gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);
            
                
            
                gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);
            
                gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);
            
                gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);
            
                
            
                // doubler
            
                for(var i = 1; i < 2; i++) {
            
                    var zpos = i * -2.0;
            
                    pointFlower.offset[0] = pointFlower.area.x * -1.0;
            
                    pointFlower.offset[1] = pointFlower.area.y * -1.0;
            
                    pointFlower.offset[2] = pointFlower.area.z * zpos;
            
                    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);
            
                    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);
            
                    
            
                    pointFlower.offset[0] = pointFlower.area.x * -1.0;
            
                    pointFlower.offset[1] = pointFlower.area.y *  1.0;
            
                    pointFlower.offset[2] = pointFlower.area.z * zpos;
            
                    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);
            
                    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);
            
                    
            
                    pointFlower.offset[0] = pointFlower.area.x *  1.0;
            
                    pointFlower.offset[1] = pointFlower.area.y * -1.0;
            
                    pointFlower.offset[2] = pointFlower.area.z * zpos;
            
                    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);
            
                    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);
            
                    
            
                    pointFlower.offset[0] = pointFlower.area.x *  1.0;
            
                    pointFlower.offset[1] = pointFlower.area.y *  1.0;
            
                    pointFlower.offset[2] = pointFlower.area.z * zpos;
            
                    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);
            
                    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);
            
                }
            
                
            
                //main
            
                pointFlower.offset[0] = 0.0;
            
                pointFlower.offset[1] = 0.0;
            
                pointFlower.offset[2] = 0.0;
            
                gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);
            
                gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);
            
                
            
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
            
                unuseShader(prog);
            
                
            
                gl.enable(gl.DEPTH_TEST);
            
                gl.disable(gl.BLEND);
            
            }
            
            
            
            // effects
            
            //common util
            
            function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {
            
                var ret = {};
            
                var unifs = ['uResolution', 'uSrc', 'uDelta'];
            
                if(exunifs) {
            
                    unifs = unifs.concat(exunifs);
            
                }
            
                var attrs = ['aPosition'];
            
                if(exattrs) {
            
                    attrs = attrs.concat(exattrs);
            
                }
            
                
            
                ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);
            
                useShader(ret.program);
            
                
            
                ret.dataArray = new Float32Array([
            
                    -1.0, -1.0,
            
                     1.0, -1.0,
            
                    -1.0,  1.0,
            
                     1.0,  1.0
            
                ]);
            
                ret.buffer = gl.createBuffer();
            
                gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);
            
                gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);
            
                
            
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
            
                unuseShader(ret.program);
            
                
            
                return ret;
            
            }
            
            
            
            // basic usage
            
            // useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize
            
            // gl.uniform**(...); //additional uniforms
            
            // drawEffect()
            
            // unuseEffect(prog)
            
            // TEXTURE0 makes src
            
            function useEffect(fxobj, srctex) {
            
                var prog = fxobj.program;
            
                useShader(prog);
            
                gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);
            
                
            
                if(srctex != null) {
            
                    gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);
            
                    gl.uniform1i(prog.uniforms.uSrc, 0);
            
                    
            
                    gl.activeTexture(gl.TEXTURE0);
            
                    gl.bindTexture(gl.TEXTURE_2D, srctex.texture);
            
                }
            
            }
            
            function drawEffect(fxobj) {
            
                gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);
            
                gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);
            
                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            
            }
            
            function unuseEffect(fxobj) {
            
                unuseShader(fxobj.program);
            
            }
            
            
            
            var effectLib = {};
            
            function createEffectLib() {
            
                
            
                var vtxsrc, frgsrc;
            
                //common
            
                var cmnvtxsrc = document.getElementById("fx_common_vsh").textContent;
            
                
            
                //background
            
                frgsrc = document.getElementById("bg_fsh").textContent;
            
                effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);
            
                
            
                // make brightpixels buffer
            
                frgsrc = document.getElementById("fx_brightbuf_fsh").textContent;
            
                effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);
            
                
            
                // direction blur
            
                frgsrc = document.getElementById("fx_dirblur_r4_fsh").textContent;
            
                effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);
            
                
            
                //final composite
            
                vtxsrc = document.getElementById("pp_final_vsh").textContent;
            
                frgsrc = document.getElementById("pp_final_fsh").textContent;
            
                effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);
            
            }
            
            
            
            // background
            
            function createBackground() {
            
                //console.log("create background");
            
            }
            
            function initBackground() {
            
                //console.log("init background");
            
            }
            
            function renderBackground() {
            
                gl.disable(gl.DEPTH_TEST);
            
                
            
                useEffect(effectLib.sceneBg, null);
            
                gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);
            
                drawEffect(effectLib.sceneBg);
            
                unuseEffect(effectLib.sceneBg);
            
                
            
                gl.enable(gl.DEPTH_TEST);
            
            }
            
            
            
            // post process
            
            var postProcess = {};
            
            function createPostProcess() {
            
                //console.log("create post process");
            
            }
            
            function initPostProcess() {
            
                //console.log("init post process");
            
            }
            
            
            
            function renderPostProcess() {
            
                gl.enable(gl.TEXTURE_2D);
            
                gl.disable(gl.DEPTH_TEST);
            
                var bindRT = function (rt, isclear) {
            
                    gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);
            
                    gl.viewport(0, 0, rt.width, rt.height);
            
                    if(isclear) {
            
                        gl.clearColor(0, 0, 0, 0);
            
                        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
                    }
            
                };
            
                
            
                //make bright buff
            
                bindRT(renderSpec.wHalfRT0, true);
            
                useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);
            
                drawEffect(effectLib.mkBrightBuf);
            
                unuseEffect(effectLib.mkBrightBuf);
            
                
            
                // make bloom
            
                for(var i = 0; i < 2; i++) {
            
                    var p = 1.5 + 1 * i;
            
                    var s = 2.0 + 1 * i;
            
                    bindRT(renderSpec.wHalfRT1, true);
            
                    useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);
            
                    gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);
            
                    drawEffect(effectLib.dirBlur);
            
                    unuseEffect(effectLib.dirBlur);
            
                    
            
                    bindRT(renderSpec.wHalfRT0, true);
            
                    useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);
            
                    gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);
            
                    drawEffect(effectLib.dirBlur);
            
                    unuseEffect(effectLib.dirBlur);
            
                }
            
                
            
                //display
            
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            
                gl.viewport(0, 0, renderSpec.width, renderSpec.height);
            
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
                
            
                useEffect(effectLib.finalComp, renderSpec.mainRT);
            
                gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);
            
                gl.activeTexture(gl.TEXTURE1);
            
                gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);
            
                drawEffect(effectLib.finalComp);
            
                unuseEffect(effectLib.finalComp);
            
                
            
                gl.enable(gl.DEPTH_TEST);
            
            }
            
            
            
            /////
            
            var SceneEnv = {};
            
            function createScene() {
            
                createEffectLib();
            
                createBackground();
            
                createPointFlowers();
            
                createPostProcess();
            
                sceneStandBy = true;
            
            }
            
            
            
            function initScene() {
            
                initBackground();
            
                initPointFlowers();
            
                initPostProcess();
            
                
            
                //camera.position.z = 17.320508;
            
                camera.position.z = pointFlower.area.z + projection.nearfar[0];
            
                projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;
            
                Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);
            
            }
            
            
            
            function renderScene() {
            
                //draw
            
                Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);
            
                
            
                gl.enable(gl.DEPTH_TEST);
            
                
            
                //gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            
                gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);
            
                gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);
            
                gl.clearColor(0.005, 0, 0.05, 0);
            
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
                
            
                renderBackground();
            
                renderPointFlowers();
            
                renderPostProcess();
            
            }
            
            
            
            /////
            
            function onResize(e) {
            
                makeCanvasFullScreen(document.getElementById("sakura"));
            
                setViewports();
            
                if(sceneStandBy) {
            
                    initScene();
            
                }
            
            }
            
            
            
            function setViewports() {
            
                renderSpec.setSize(gl.canvas.width, gl.canvas.height);
            
                
            
                gl.clearColor(0.2, 0.2, 0.5, 1.0);
            
                gl.viewport(0, 0, renderSpec.width, renderSpec.height);
            
                
            
                var rtfunc = function (rtname, rtw, rth) {
            
                    var rt = renderSpec[rtname];
            
                    if(rt) deleteRenderTarget(rt);
            
                    renderSpec[rtname] = createRenderTarget(rtw, rth);
            
                };
            
                rtfunc('mainRT', renderSpec.width, renderSpec.height);
            
                rtfunc('wFullRT0', renderSpec.width, renderSpec.height);
            
                rtfunc('wFullRT1', renderSpec.width, renderSpec.height);
            
                rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);
            
                rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);
            
            }
            
            
            
            function render() {
            
                renderScene();
            
            }
            
            
            
            var animating = true;
            
            function toggleAnimation(elm) {
            
                animating ^= true;
            
                if(animating) animate();
            
                if(elm) {
            
                    elm.innerHTML = animating? "Stop":"Start";
            
                }
            
            }
            
            
            
            function stepAnimation() {
            
                if(!animating) animate();
            
            }
            
            
            
            function animate() {
            
                var curdate = new Date();
            
                timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;
            
                timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;
            
                timeInfo.prev = curdate;
            
                
            
                if(animating) requestAnimationFrame(animate);
            
                render();
            
            }
            
            
            
            function makeCanvasFullScreen(canvas) {
            
                var b = document.body;
            
                var d = document.documentElement;
            
                fullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);
            
                fullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);
            
                canvas.width = fullw;
            
                canvas.height = fullh;
            
            }
            
            
            
            window.addEventListener('load', function(e) {
            
                var canvas = document.getElementById("sakura");
            
                try {
            
                    makeCanvasFullScreen(canvas);
            
                    gl = canvas.getContext('experimental-webgl');
            
                } catch(e) {
            
                    alert("WebGL not supported." + e);
            
                    console.error(e);
            
                    return;
            
                }
            
                
            
                window.addEventListener('resize', onResize);
            
                
            
                setViewports();
            
                createScene();
            
                initScene();
            
                
            
                timeInfo.start = new Date();
            
                timeInfo.prev = timeInfo.start;
            
                animate();
            
            });
            
            
            
            //set window.requestAnimationFrame
            
            (function (w, r) {
            
                w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };
            
            })(window, 'equestAnimationFrame');
            
            </script>

</body></html>